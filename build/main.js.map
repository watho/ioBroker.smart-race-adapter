{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { RaceEventHandling } from \"./lib/race-event-handling\";\r\nimport { WebServer } from \"@iobroker/webserver\";\r\nimport { IncomingMessage, ServerResponse } from \"http\";\r\nimport * as http from \"http\";\r\nimport * as https from \"https\";\r\n\r\nexport class SmartRaceEventReceiver extends utils.Adapter {\r\n    private server:\r\n        | http.Server<typeof IncomingMessage, typeof ServerResponse>\r\n        | https.Server<typeof http.IncomingMessage, typeof http.ServerResponse>\r\n        | undefined;\r\n\r\n    private api: RaceEventHandling;\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: \"smart-race-event-receiver\",\r\n        });\r\n        this.api = new RaceEventHandling(this);\r\n        this.on(\"ready\", this.onReady.bind(this));\r\n        this.on(\"stateChange\", this.onStateChange.bind(this));\r\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n        // this.on(\"message\", this.onMessage.bind(this));\r\n        this.on(\"unload\", this.onUnload.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        // Initialize your adapter here\r\n\r\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n        // this.config:\r\n        this.log.info(\"config useSsl: \" + this.config.useSsl);\r\n        this.log.info(\"config port: \" + this.config.port);\r\n\r\n        const requestProcessor = (req: IncomingMessage, res: ServerResponse): void => {\r\n            if (req.method === \"POST\") {\r\n                //this.log.info(\"Buh\");\r\n                //this.log.debug(\"Received request: \" + req.url);\r\n                // var parsedUrl = url.parse(req.url, true);\r\n                // var reqData = parsedUrl.query;\r\n                //\r\n                // adapter.log.debug(\"Analyzed request data: \" + JSON.stringify(reqData));\r\n                // var user = parsedUrl.pathname.slice(1);\r\n                this.log.debug(\"Request received: \" + req.url);\r\n                //const reqData = JSON.stringify(req.data);\r\n                //this.log.debug(\"Payload: \" + reqData);\r\n\r\n                let body = \"\";\r\n                // retrieving and appending post data\r\n                req.on(\"data\", (data) => (body += data));\r\n                // end of data\r\n                req.on(\"end\", () => {\r\n                    this.log.debug(\"Payload: \" + body);\r\n                    const payload = JSON.parse(body);\r\n                    this.api.handleRequest(payload);\r\n                });\r\n                res.writeHead(200);\r\n                res.write(\"OK\");\r\n                res.end();\r\n            } else {\r\n                res.writeHead(500);\r\n                res.write(\"Request error\");\r\n                res.end();\r\n            }\r\n        };\r\n\r\n        const webServer = new WebServer({ adapter: this, app: requestProcessor, secure: this.config.useSsl });\r\n        // initialize and you can use your server as known\r\n        this.server = await webServer.init();\r\n        this.log.info(\r\n            \"Starting server on port \" + this.config.port + \" and protocol \" + (this.config.useSsl ? \"https\" : \"http\"),\r\n        );\r\n        this.server.listen(this.config.port);\r\n\r\n        /*\r\n\t\tFor every state in the system there has to be also an object of type state\r\n\t\tHere a simple template for a boolean variable named \"testVariable\"\r\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n\t\t*/\r\n        // await this.setObjectNotExistsAsync(\"testVariable\", {\r\n        //     type: \"state\",\r\n        //     common: {\r\n        //         name: \"testVariable\",\r\n        //         type: \"boolean\",\r\n        //         role: \"indicator\",\r\n        //         read: true,\r\n        //         write: true,\r\n        //     },\r\n        //     native: {},\r\n        // });\r\n\r\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n        // this.subscribeStates(\"testVariable\");\r\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n        // this.subscribeStates(\"lights.*\");\r\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n        // this.subscribeStates(\"*\");\r\n\r\n        /*\r\n\t\t\tsetState examples\r\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n\t\t*/\r\n        // the variable testVariable is set to true as command (ack=false)\r\n        // await this.setStateAsync(\"testVariable\", true);\r\n\r\n        // same thing, but the value is flagged \"ack\"\r\n        // ack should be always set to true if the value is received from or acknowledged from the target system\r\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\r\n\r\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\r\n\r\n        // examples for the checkPassword/checkGroup functions\r\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\r\n        // this.log.info(\"check user admin pw iobroker: \" + result);\r\n        //\r\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\r\n        // this.log.info(\"check group user admin group admin: \" + result);\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            // Here you must clear all timeouts or intervals that may still be active\r\n            // clearTimeout(timeout1);\r\n            // clearTimeout(timeout2);\r\n            // ...\r\n            // clearInterval(interval1);\r\n            this.log.debug(\"onUnload\");\r\n            if (this.server) {\r\n                this.log.debug(\"closing server on port \" + this.config.port);\r\n                this.server.close();\r\n            }\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n    //     if (obj) {\r\n    //         // The object was changed\r\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n    //     } else {\r\n    //         // The object was deleted\r\n    //         this.log.info(`object ${id} deleted`);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n        } else {\r\n            // The state was deleted\r\n            this.log.info(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n    // /**\r\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n    //  */\r\n    // private onMessage(obj: ioBroker.Message): void {\r\n    //     if (typeof obj === \"object\" && obj.message) {\r\n    //         if (obj.command === \"send\") {\r\n    //             // e.g. send email or pushover or whatever\r\n    //             this.log.info(\"send command\");\r\n\r\n    //             // Send response in callback if required\r\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n    //         }\r\n    //     }\r\n    // }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SmartRaceEventReceiver(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new SmartRaceEventReceiver())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,YAAuB;AACvB,iCAAkC;AAClC,uBAA0B;AAKnB,MAAM,+BAA+B,MAAM,QAAQ;AAAA,EAC9C;AAAA,EAKA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,MAAM,IAAI,6CAAkB,IAAI;AACrC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAKnC,SAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,MAAM;AACpD,SAAK,IAAI,KAAK,kBAAkB,KAAK,OAAO,IAAI;AAEhD,UAAM,mBAAmB,CAAC,KAAsB,QAA8B;AAC1E,UAAI,IAAI,WAAW,QAAQ;AAQvB,aAAK,IAAI,MAAM,uBAAuB,IAAI,GAAG;AAI7C,YAAI,OAAO;AAEX,YAAI,GAAG,QAAQ,CAAC,SAAU,QAAQ,IAAK;AAEvC,YAAI,GAAG,OAAO,MAAM;AAChB,eAAK,IAAI,MAAM,cAAc,IAAI;AACjC,gBAAM,UAAU,KAAK,MAAM,IAAI;AAC/B,eAAK,IAAI,cAAc,OAAO;AAAA,QAClC,CAAC;AACD,YAAI,UAAU,GAAG;AACjB,YAAI,MAAM,IAAI;AACd,YAAI,IAAI;AAAA,MACZ,OAAO;AACH,YAAI,UAAU,GAAG;AACjB,YAAI,MAAM,eAAe;AACzB,YAAI,IAAI;AAAA,MACZ;AAAA,IACJ;AAEA,UAAM,YAAY,IAAI,2BAAU,EAAE,SAAS,MAAM,KAAK,kBAAkB,QAAQ,KAAK,OAAO,OAAO,CAAC;AAEpG,SAAK,SAAS,MAAM,UAAU,KAAK;AACnC,SAAK,IAAI;AAAA,MACL,6BAA6B,KAAK,OAAO,OAAO,oBAAoB,KAAK,OAAO,SAAS,UAAU;AAAA,IACvG;AACA,SAAK,OAAO,OAAO,KAAK,OAAO,IAAI;AAAA,EA8CvC;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAMA,WAAK,IAAI,MAAM,UAAU;AACzB,UAAI,KAAK,QAAQ;AACb,aAAK,IAAI,MAAM,4BAA4B,KAAK,OAAO,IAAI;AAC3D,aAAK,OAAO,MAAM;AAAA,MACtB;AACA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,uBAAuB,OAAO;AAC/G,OAAO;AAEH,GAAC,MAAM,IAAI,uBAAuB,GAAG;AACzC;",
  "names": []
}
