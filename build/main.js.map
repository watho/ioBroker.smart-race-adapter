{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { RaceEventHandling } from \"./lib/race-event-handling\";\nimport { WebServer } from \"@iobroker/webserver\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport * as http from \"http\";\nimport * as https from \"https\";\n\nexport class SmartRaceEventReceiver extends utils.Adapter {\n    private server:\n        | http.Server<typeof IncomingMessage, typeof ServerResponse>\n        | https.Server<typeof http.IncomingMessage, typeof http.ServerResponse>\n        | undefined;\n\n    private api: RaceEventHandling;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"smart-race-event-receiver\",\n        });\n        this.api = new RaceEventHandling(this);\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info(\"config useSsl: \" + this.config.useSsl);\n        this.log.info(\"config port: \" + this.config.port);\n\n        const requestProcessor = (req: IncomingMessage, res: ServerResponse): void => {\n            if (req.method === \"POST\") {\n                //this.log.info(\"Buh\");\n                //this.log.debug(\"Received request: \" + req.url);\n                // var parsedUrl = url.parse(req.url, true);\n                // var reqData = parsedUrl.query;\n                //\n                // adapter.log.debug(\"Analyzed request data: \" + JSON.stringify(reqData));\n                // var user = parsedUrl.pathname.slice(1);\n                this.log.debug(\"Request received: \" + req.url);\n                //const reqData = JSON.stringify(req.data);\n                //this.log.debug(\"Payload: \" + reqData);\n\n                let body = \"\";\n                // retrieving and appending post data\n                req.on(\"data\", (data) => (body += data));\n                // end of data\n                req.on(\"end\", () => {\n                    this.log.debug(\"Payload: \" + body);\n                    const payload = JSON.parse(body);\n                    this.api.handleRequest(payload);\n                });\n                res.writeHead(200);\n                res.write(\"OK\");\n                res.end();\n            } else {\n                res.writeHead(500);\n                res.write(\"Request error\");\n                res.end();\n            }\n        };\n\n        const webServer = new WebServer({ adapter: this, app: requestProcessor, secure: this.config.useSsl });\n        // initialize and you can use your server as known\n        this.server = await webServer.init();\n        this.log.info(\n            \"Starting server on port \" + this.config.port + \" and protocol \" + (this.config.useSsl ? \"https\" : \"http\"),\n        );\n        this.server.listen(this.config.port);\n\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        // await this.setObjectNotExistsAsync(\"testVariable\", {\n        //     type: \"state\",\n        //     common: {\n        //         name: \"testVariable\",\n        //         type: \"boolean\",\n        //         role: \"indicator\",\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // this.subscribeStates(\"testVariable\");\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates(\"lights.*\");\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates(\"*\");\n\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync(\"testVariable\", true);\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n        // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        // this.log.info(\"check user admin pw iobroker: \" + result);\n        //\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\n        // this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            this.log.debug(\"onUnload\");\n            if (this.server) {\n                this.log.debug(\"closing server on port \" + this.config.port);\n                this.server.close();\n            }\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SmartRaceEventReceiver(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SmartRaceEventReceiver())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,YAAuB;AACvB,iCAAkC;AAClC,uBAA0B;AAKnB,MAAM,+BAA+B,MAAM,QAAQ;AAAA,EAC9C;AAAA,EAKA;AAAA,EAED,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,MAAM,IAAI,6CAAkB,IAAI;AACrC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAKnC,SAAK,IAAI,KAAK,oBAAoB,KAAK,OAAO,MAAM;AACpD,SAAK,IAAI,KAAK,kBAAkB,KAAK,OAAO,IAAI;AAEhD,UAAM,mBAAmB,CAAC,KAAsB,QAA8B;AAC1E,UAAI,IAAI,WAAW,QAAQ;AAQvB,aAAK,IAAI,MAAM,uBAAuB,IAAI,GAAG;AAI7C,YAAI,OAAO;AAEX,YAAI,GAAG,QAAQ,CAAC,SAAU,QAAQ,IAAK;AAEvC,YAAI,GAAG,OAAO,MAAM;AAChB,eAAK,IAAI,MAAM,cAAc,IAAI;AACjC,gBAAM,UAAU,KAAK,MAAM,IAAI;AAC/B,eAAK,IAAI,cAAc,OAAO;AAAA,QAClC,CAAC;AACD,YAAI,UAAU,GAAG;AACjB,YAAI,MAAM,IAAI;AACd,YAAI,IAAI;AAAA,MACZ,OAAO;AACH,YAAI,UAAU,GAAG;AACjB,YAAI,MAAM,eAAe;AACzB,YAAI,IAAI;AAAA,MACZ;AAAA,IACJ;AAEA,UAAM,YAAY,IAAI,2BAAU,EAAE,SAAS,MAAM,KAAK,kBAAkB,QAAQ,KAAK,OAAO,OAAO,CAAC;AAEpG,SAAK,SAAS,MAAM,UAAU,KAAK;AACnC,SAAK,IAAI;AAAA,MACL,6BAA6B,KAAK,OAAO,OAAO,oBAAoB,KAAK,OAAO,SAAS,UAAU;AAAA,IACvG;AACA,SAAK,OAAO,OAAO,KAAK,OAAO,IAAI;AAAA,EA8CvC;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAMA,WAAK,IAAI,MAAM,UAAU;AACzB,UAAI,KAAK,QAAQ;AACb,aAAK,IAAI,MAAM,4BAA4B,KAAK,OAAO,IAAI;AAC3D,aAAK,OAAO,MAAM;AAAA,MACtB;AACA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,uBAAuB,OAAO;AAC/G,OAAO;AAEH,GAAC,MAAM,IAAI,uBAAuB,GAAG;AACzC;",
  "names": []
}
