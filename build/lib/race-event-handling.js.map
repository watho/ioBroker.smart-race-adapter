{
  "version": 3,
  "sources": ["../../src/lib/race-event-handling.ts"],
  "sourcesContent": ["import { SmartRaceEventReceiver } from \"../main\";\nimport { RaceEvent, RaceEventValidator } from \"./race-event-parsing\";\nimport { FailedValidationError } from \"jointz\";\n\nexport class RaceEventHandling {\n    private adapter: SmartRaceEventReceiver;\n\n    constructor(adapter: SmartRaceEventReceiver) {\n        this.adapter = adapter;\n    }\n\n    async handleRequest(eventJson: string): Promise<void> {\n        try {\n            const raceEvent: RaceEvent = await this.parseEventData(eventJson);\n            const eventType = raceEvent.event_type;\n            this.adapter.log.debug(\"Handling event \" + eventType);\n            const eventTime = raceEvent.time;\n            await this.adapter.setStateAsync(\"event.name\", { val: eventType, ack: true, ts: eventTime });\n            await this.adapter.setStateAsync(\"event.timestamp\", { val: eventTime, ack: true, ts: eventTime });\n            const eventData = raceEvent.event_data;\n\n            switch (eventType) {\n                case \"event.start\":\n                    this.handleEventStart(eventTime, eventData);\n                    break;\n                case \"event.end\":\n                    this.handleEventEnd(eventTime, eventData);\n                    break;\n                case \"event.change_status\":\n                    await this.handleEventChangeStatus(eventTime, eventData);\n                    break;\n                default:\n                    this.adapter.log.warn(\"Invalid or unimplemented event type received: \" + eventType);\n            }\n        } catch (validationError: any) {\n            if (validationError instanceof FailedValidationError) {\n                this.adapter.log.error(\"Received invalid or unknown event: \" + JSON.stringify(validationError.errors));\n            } else {\n                this.adapter.log.error(\"Error parsing received json: \" + JSON.stringify(validationError));\n            }\n        }\n    }\n\n    async parseEventData(eventDataJson: string): Promise<RaceEvent> {\n        return RaceEventValidator.checkValid(eventDataJson);\n    }\n\n    /**\n     * {\n     *     \"type\": \"race\",\n     *     \"laps\": \"50\"\n     * }\n     *\n     * @param eventTime\n     * @param eventData\n     */\n    async handleEventStart(eventTime: any, eventData: any): Promise<void> {\n        const raceType = eventData.type;\n        const duration = eventData.duration;\n        const laps = eventData.laps;\n        this.adapter.log.info(\"Event start of type \" + raceType);\n        await this.adapter.setStateAsync(\"event.start.type\", { val: raceType, ack: true, ts: eventTime });\n        if (duration) {\n            await this.adapter.setStateAsync(\"event.start.duration\", { val: duration, ack: true, ts: eventTime });\n            await this.adapter.delStateAsync(\"event.start.laps\");\n        }\n        if (laps) {\n            await this.adapter.setStateAsync(\"event.start.laps\", { val: laps, ack: true, ts: eventTime });\n            await this.adapter.delStateAsync(\"event.start.duration\");\n        }\n        this.adapter.log.info(\"duration \" + (await this.adapter.getStateAsync(\"event.start.duration\")));\n        this.adapter.log.info(\"laps \" + (await this.adapter.getStateAsync(\"event.start.laps\")));\n    }\n\n    handleEventEnd(eventTime: any, eventData: any): void {\n        const raceType = eventData.type;\n        this.adapter.log.info(\"Event end of type \" + raceType);\n    }\n\n    /**\n     * {\n     *     \"old\": \"running\",\n     *     \"new\": \"ended\"\n     * }\n     *\n     * Valid status names: prepare_for_start, starting, jumpstart, running, suspended, restarting, ended\n     *\n     * @param eventTime\n     * @param eventData\n     */\n    async handleEventChangeStatus(eventTime: any, eventData: any): Promise<void> {\n        const oldStatus = eventData.old;\n        const newStatus = eventData.new;\n        this.adapter.log.info(\"Change race status from \" + oldStatus + \" to \" + newStatus);\n        await this.adapter.setStateAsync(\"event.change_status.old\", { val: oldStatus, ack: true, ts: eventTime });\n        await this.adapter.setStateAsync(\"event.change_status.new\", { val: newStatus, ack: true, ts: eventTime });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gCAA8C;AAC9C,oBAAsC;AAE/B,MAAM,kBAAkB;AAAA,EACnB;AAAA,EAER,YAAY,SAAiC;AACzC,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,MAAM,cAAc,WAAkC;AAClD,QAAI;AACA,YAAM,YAAuB,MAAM,KAAK,eAAe,SAAS;AAChE,YAAM,YAAY,UAAU;AAC5B,WAAK,QAAQ,IAAI,MAAM,oBAAoB,SAAS;AACpD,YAAM,YAAY,UAAU;AAC5B,YAAM,KAAK,QAAQ,cAAc,cAAc,EAAE,KAAK,WAAW,KAAK,MAAM,IAAI,UAAU,CAAC;AAC3F,YAAM,KAAK,QAAQ,cAAc,mBAAmB,EAAE,KAAK,WAAW,KAAK,MAAM,IAAI,UAAU,CAAC;AAChG,YAAM,YAAY,UAAU;AAE5B,cAAQ,WAAW;AAAA,QACf,KAAK;AACD,eAAK,iBAAiB,WAAW,SAAS;AAC1C;AAAA,QACJ,KAAK;AACD,eAAK,eAAe,WAAW,SAAS;AACxC;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,wBAAwB,WAAW,SAAS;AACvD;AAAA,QACJ;AACI,eAAK,QAAQ,IAAI,KAAK,mDAAmD,SAAS;AAAA,MAC1F;AAAA,IACJ,SAAS,iBAAP;AACE,UAAI,2BAA2B,qCAAuB;AAClD,aAAK,QAAQ,IAAI,MAAM,wCAAwC,KAAK,UAAU,gBAAgB,MAAM,CAAC;AAAA,MACzG,OAAO;AACH,aAAK,QAAQ,IAAI,MAAM,kCAAkC,KAAK,UAAU,eAAe,CAAC;AAAA,MAC5F;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe,eAA2C;AAC5D,WAAO,6CAAmB,WAAW,aAAa;AAAA,EACtD;AAAA,EAWA,MAAM,iBAAiB,WAAgB,WAA+B;AAClE,UAAM,WAAW,UAAU;AAC3B,UAAM,WAAW,UAAU;AAC3B,UAAM,OAAO,UAAU;AACvB,SAAK,QAAQ,IAAI,KAAK,yBAAyB,QAAQ;AACvD,UAAM,KAAK,QAAQ,cAAc,oBAAoB,EAAE,KAAK,UAAU,KAAK,MAAM,IAAI,UAAU,CAAC;AAChG,QAAI,UAAU;AACV,YAAM,KAAK,QAAQ,cAAc,wBAAwB,EAAE,KAAK,UAAU,KAAK,MAAM,IAAI,UAAU,CAAC;AACpG,YAAM,KAAK,QAAQ,cAAc,kBAAkB;AAAA,IACvD;AACA,QAAI,MAAM;AACN,YAAM,KAAK,QAAQ,cAAc,oBAAoB,EAAE,KAAK,MAAM,KAAK,MAAM,IAAI,UAAU,CAAC;AAC5F,YAAM,KAAK,QAAQ,cAAc,sBAAsB;AAAA,IAC3D;AACA,SAAK,QAAQ,IAAI,KAAK,cAAe,MAAM,KAAK,QAAQ,cAAc,sBAAsB,CAAE;AAC9F,SAAK,QAAQ,IAAI,KAAK,UAAW,MAAM,KAAK,QAAQ,cAAc,kBAAkB,CAAE;AAAA,EAC1F;AAAA,EAEA,eAAe,WAAgB,WAAsB;AACjD,UAAM,WAAW,UAAU;AAC3B,SAAK,QAAQ,IAAI,KAAK,uBAAuB,QAAQ;AAAA,EACzD;AAAA,EAaA,MAAM,wBAAwB,WAAgB,WAA+B;AACzE,UAAM,YAAY,UAAU;AAC5B,UAAM,YAAY,UAAU;AAC5B,SAAK,QAAQ,IAAI,KAAK,6BAA6B,YAAY,SAAS,SAAS;AACjF,UAAM,KAAK,QAAQ,cAAc,2BAA2B,EAAE,KAAK,WAAW,KAAK,MAAM,IAAI,UAAU,CAAC;AACxG,UAAM,KAAK,QAAQ,cAAc,2BAA2B,EAAE,KAAK,WAAW,KAAK,MAAM,IAAI,UAAU,CAAC;AAAA,EAC5G;AACJ;",
  "names": []
}
